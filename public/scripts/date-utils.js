/**
 *
 * @param date date to check(required)
 * @param minDate minimal Date rent(default current day)
 * @param maxDate maximal Date rent(default last day of next month)
 * @returns true or false value
 */
const checkDate = (date, minDate = new Date(), maxDate = getLastDayOfNextMonth(new Date())) => {
    return minDate <= date && date <= maxDate;
};
/**
 *
 * @param date Date
 * @returns Date in range from current Date to last day of next month
 */
export const getMinDefaultDate = (date) => {
    if (checkDate(date))
        return date;
    else
        return getDateWithDelta(new Date(), 1);
};
/**
 *
 * @param minDate minimal Date
 * @param date Date
 * @returns Date in range from minimal date to last day of next month
 */
export const getMaxDefaultDate = (minDate, date) => {
    if (checkDate(date, minDate))
        return date;
    else
        return getDateWithDelta(minDate, 3);
};
/**
 *
 * @param date Date
 * @param delta Days count
 * @returns new Date with delta days
 */
export const getDateWithDelta = (date, delta) => {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + delta);
};
/**
 *
 * @param date Date
 * @returns last day of next month
 */
export const getLastDayOfNextMonth = (date) => {
    return new Date(date.getFullYear(), date.getMonth() + 2, 0);
};
/**
 *
 * @param date Date
 * @returns string with data in format YYYY-mm-dd
 */
export const formatDate = (date) => {
    return `${date.getFullYear()}-${("0" + (date.getMonth() + 1)).slice(-2)}-${("0" + date.getDate()).slice(-2)}`;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRlLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE1BQU0sU0FBUyxHQUFHLENBQ2hCLElBQVUsRUFDVixVQUFnQixJQUFJLElBQUksRUFBRSxFQUMxQixVQUFnQixxQkFBcUIsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQ3hDLEVBQUU7SUFDWCxPQUFPLE9BQU8sSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxJQUFVLEVBQVEsRUFBRTtJQUNwRCxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQzs7UUFDNUIsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUMsQ0FBQztBQUVGOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxPQUFhLEVBQUUsSUFBVSxFQUFRLEVBQUU7SUFDbkUsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDOztRQUNyQyxPQUFPLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBVSxFQUFFLEtBQWEsRUFBUSxFQUFFO0lBQ2xFLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDL0UsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsSUFBVSxFQUFRLEVBQUU7SUFDeEQsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5RCxDQUFDLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBVSxFQUFVLEVBQUU7SUFDL0MsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3pFLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQ3JCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNoQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBAcGFyYW0gZGF0ZSBkYXRlIHRvIGNoZWNrKHJlcXVpcmVkKVxuICogQHBhcmFtIG1pbkRhdGUgbWluaW1hbCBEYXRlIHJlbnQoZGVmYXVsdCBjdXJyZW50IGRheSlcbiAqIEBwYXJhbSBtYXhEYXRlIG1heGltYWwgRGF0ZSByZW50KGRlZmF1bHQgbGFzdCBkYXkgb2YgbmV4dCBtb250aClcbiAqIEByZXR1cm5zIHRydWUgb3IgZmFsc2UgdmFsdWVcbiAqL1xuY29uc3QgY2hlY2tEYXRlID0gKFxuICBkYXRlOiBEYXRlLFxuICBtaW5EYXRlOiBEYXRlID0gbmV3IERhdGUoKSxcbiAgbWF4RGF0ZTogRGF0ZSA9IGdldExhc3REYXlPZk5leHRNb250aChuZXcgRGF0ZSgpKVxuKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBtaW5EYXRlIDw9IGRhdGUgJiYgZGF0ZSA8PSBtYXhEYXRlO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGRhdGUgRGF0ZVxuICogQHJldHVybnMgRGF0ZSBpbiByYW5nZSBmcm9tIGN1cnJlbnQgRGF0ZSB0byBsYXN0IGRheSBvZiBuZXh0IG1vbnRoXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRNaW5EZWZhdWx0RGF0ZSA9IChkYXRlOiBEYXRlKTogRGF0ZSA9PiB7XG4gIGlmIChjaGVja0RhdGUoZGF0ZSkpIHJldHVybiBkYXRlO1xuICBlbHNlIHJldHVybiBnZXREYXRlV2l0aERlbHRhKG5ldyBEYXRlKCksIDEpO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIG1pbkRhdGUgbWluaW1hbCBEYXRlXG4gKiBAcGFyYW0gZGF0ZSBEYXRlXG4gKiBAcmV0dXJucyBEYXRlIGluIHJhbmdlIGZyb20gbWluaW1hbCBkYXRlIHRvIGxhc3QgZGF5IG9mIG5leHQgbW9udGhcbiAqL1xuZXhwb3J0IGNvbnN0IGdldE1heERlZmF1bHREYXRlID0gKG1pbkRhdGU6IERhdGUsIGRhdGU6IERhdGUpOiBEYXRlID0+IHtcbiAgaWYgKGNoZWNrRGF0ZShkYXRlLCBtaW5EYXRlKSkgcmV0dXJuIGRhdGU7XG4gIGVsc2UgcmV0dXJuIGdldERhdGVXaXRoRGVsdGEobWluRGF0ZSwgMyk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gZGF0ZSBEYXRlXG4gKiBAcGFyYW0gZGVsdGEgRGF5cyBjb3VudFxuICogQHJldHVybnMgbmV3IERhdGUgd2l0aCBkZWx0YSBkYXlzXG4gKi9cbmV4cG9ydCBjb25zdCBnZXREYXRlV2l0aERlbHRhID0gKGRhdGU6IERhdGUsIGRlbHRhOiBudW1iZXIpOiBEYXRlID0+IHtcbiAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSArIGRlbHRhKTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBkYXRlIERhdGVcbiAqIEByZXR1cm5zIGxhc3QgZGF5IG9mIG5leHQgbW9udGhcbiAqL1xuZXhwb3J0IGNvbnN0IGdldExhc3REYXlPZk5leHRNb250aCA9IChkYXRlOiBEYXRlKTogRGF0ZSA9PiB7XG4gIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSArIDIsIDApO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGRhdGUgRGF0ZVxuICogQHJldHVybnMgc3RyaW5nIHdpdGggZGF0YSBpbiBmb3JtYXQgWVlZWS1tbS1kZFxuICovXG5leHBvcnQgY29uc3QgZm9ybWF0RGF0ZSA9IChkYXRlOiBEYXRlKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGAke2RhdGUuZ2V0RnVsbFllYXIoKX0tJHsoXCIwXCIgKyAoZGF0ZS5nZXRNb250aCgpICsgMSkpLnNsaWNlKC0yKX0tJHsoXG4gICAgXCIwXCIgKyBkYXRlLmdldERhdGUoKVxuICApLnNsaWNlKC0yKX1gO1xufTtcbiJdfQ==